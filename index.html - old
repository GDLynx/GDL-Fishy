<!doctype html>
<html>
<head>
    <meta charset="utf-8">
    <title>Fish</title>
	<style>

body {
	padding:0;
	margin:0;
    background-color: brown;
}
	</style>
    <!--
	<link rel="stylesheet" href="style.css">
    <script src="main.js"></script> -->
</head>
<!-- <body onload="init()">
    <div id="ball"></div>  -->

<body>
    <canvas id="canvas" width="400" height="400">Canvas not supported</canvas>

	<script>
      
    /// Get Canvas & Context
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");

    /// Global variables
    var canvasWidth = 400, canvasHeight = 400;


    /// Initiallize objects (in global scope)
    var fish;
    var collectable = [];

    /// Unsure what this does
    if (!window.requestAnimationFrame) {
        window.requestAnimationFrame = (function() {
            return window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function(/* function frameRequestCallback */ callback, /*DOMElement Element */  element) {
                window.setTimeout(callback, 1000 / 60);
            }
        })();
    }


    function init() {
        /// Check the device's orientation is accessible
        if (window.DeviceOrientationEvent) {
            window.addEventListener("deviceorientation", function(event)
            {
                /// Get Device Orientation (for Fish)
                fish.getDeviceOrientation();
            })
        };

        /// Create Object Instances (unsure if this should be here or in "update")
        fish = new Fish();

        //for (var collectableInstance = 0; collectableInstance < collectable.length; i)
        for (var i = 0; i < 3; i++) {
            collectable[i] = new Collectable();
            console.log(collectable.length);
        }

        /// Begin Game
        update();
    }

    function update() {
        // console.log("Update function begins");

        /// Create Object Instances
        //fish = new Fish();

        /// Move / Update / Trigger Behavior for Object/s
        fish.move();
        for (var i = 0; i < collectable.length; i++) {
            collectable[i].move();
        }

        /// Clear canvas + draw (to an empty canvas)
        ctx.clearRect(0, 0, canvasWidth, canvasHeight);
        fish.draw();
        for (var i = 0; i < collectable.length; i++) {
            collectable[i].draw();
        }
        /// Collision Check
        /*
        fish.intersects(collectable);
        if (fish.intersects(collectable)) {
            //alert("COLL");
        }
        */
        for (var i = 0; i < collectable.length; i++) {
            fish.intersects(collectable[i]);
            if (fish.intersects(collectable[i])) {
                alert("COLL: " + "Index: " + i + " " + collectable.length);
            }
        }

        // console.log(collectable.length);
        // console.log("Requesting animation frame");
        requestAnimationFrame(update); // Keep animating
    }

    /// Object/s (Constructor functions) Defintions
    function Fish() {

        this.velocity = {
            x:30, y:60
        }
        this.position = {
            x:0, y:0
        }
        this.width = 30;
        this.height = 30;
        this.score = 0;

        /// Get Device Orientation
        this.getDeviceOrientation = function() {
            this.velocity.y = Math.round(event.beta);
            this.velocity.x = Math.round(event.gamma);
        }

        /// Move Object
        this.move = function() { // should collision / intersection checking occur here?
            this.position.x += this.velocity.x;
            this.position.y += this.velocity.y;
        }

        this.intersects = function(other) {
            if (this.position.x < other.position.x + other.width &&
                    this.position.x + this.width > other.position.x &&
                    this.position.y < other.position.y + other.height &&
                    this.height + this.position.y > other.position.y) {
                // alert("Collected");
                console.log("Collision");
                return true;
            } else {
                //console.log("No collision");
            }
        }

        /// Draw Object
        this.draw = function() {
            ctx.fillRect(this.position.x, this.position.y, this.width, this.height);
        }
    }

    function Collectable() {
        this.position = {
            x: Math.random() * canvasWidth,
            y: Math.random() * canvasHeight
        };
        this.width = 30;
        this.height = 30;

        /// Draw Object
        this.draw = function() {
            ctx.fillRect(this.position.x, this.position.y, this.width, this.height);
            ctx.fill();
            ctx.fillStyle = "green";
        }

        /// Move / Position Object
        this.move = function() {
            if (this.position.x >= canvasWidth) {
                this.position.x = 0 + this.width;
                this.position.y = Math.random() * canvasHeight;
            } else {
                this.position.x += 1;
            }
        }
    }

    /// Run Initiallization function which will begin the game
    init();

	</script>
</body>
</html>
